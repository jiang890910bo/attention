<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
       default-lazy-init="true">

    <!-- 自动扫描分包 -->
    <context:component-scan base-package="com.lance.dev.hibernate">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--数据库连接配置-->
    <!--
    几经周折，主要因为兼容性的问题，取消spring的profile模式。采用各自的db-connection.properties，
    该文件不上传指git服务器（已在.gitignore中添加）。需要连接什么数据库直接在该文件
    中进行选择/注释。以后就不要再修改spring的这个配置文件了。

    by Tanliang, 2014-6-18
    -->
    <context:property-placeholder
            ignore-unresolvable="true"
            location="classpath*:/db-common.properties,
                classpath*:/db-connection.properties"/>

    <bean id="schemaBasedMultiTenantConnectionProvider" class="com.lance.dev.hibernate.ext.SchemaBasedMultiTenantConnectionProvider" lazy-init="false" >
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 数据源 -->
    <!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"
                  value="${druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements"
                  value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>



    <!-- 加入AOP -->
    <aop:aspectj-autoproxy/>

    <!-- 配置JPA -->
    <!-- JPA实体管理工厂的配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="schemaBasedMultiTenantConnectionProvider">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="com.lance.dev.hibernate.entity"/>
        <!--待扫描的实体类包，不再需要persistence.xml了-->
        <property name="jpaProperties">
            <props>
                <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <!--增加了命名策略，分几种情况：
                 @Table 可以不用写name, 表名自动加tms_
                 @ManyToOne 和 @OneToOne 的情况下，只要写@JoinColumn ，属性名自动加前缀fk_作为字段名
                 @ManyToOne双向，用mappedBy，命名策略同上
                单向OneToMany和有关联表的情况下，比较复杂，自己命名
                -->
                <!--<prop key="hibernate.use_sql_comments">true</prop>-->
                <!--<prop key="hibernate.format_sql">true</prop>-->
                <prop key="hibernate.show_sql">true</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <!--<prop key="hibernate.connection.autocommit">false</prop>-->

                <!--Multi Tenancy-->
                <prop key="hibernate.multiTenancy">SCHEMA</prop>
                <prop key="hibernate.tenant_identifier_resolver">com.bredtan.devbook.multitenancy.ext.TenantIdResolver</prop>
                <prop key="hibernate.multi_tenant_connection_provider">com.bredtan.devbook.multitenancy.ext.SchemaBasedMultiTenantConnectionProvider</prop>
            </props>
        </property>
    </bean>

    <!--指定实现JPA的适配器-->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
    </bean>

    <!-- Jpa 事务配置 -->
    <bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="jpaTransactionManager" proxy-target-class="true"/>

    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.lance.dev.hibernate.**.repository"
                      transaction-manager-ref="jpaTransactionManager"
                      entity-manager-factory-ref="entityManagerFactory"
                      repository-impl-postfix="Impl"
            />
</beans>
